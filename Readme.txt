### Инструкция по работе со скриптом резервного копирования баз данных

#### Установка и подготовка

1. **Убедитесь, что Python установлен**: Этот скрипт написан на Python. Убедитесь, что у вас установлен Python 3. Вы можете скачать его с официального сайта [python.org](https://www.python.org/).

Замечание: если вы используете скомпилированный исполняемый файл, установка Python не обязательна, скомпилированный файл имеет все необходимые библиотеки.

2. **Установите необходимые библиотеки**: Если у вас еще не установлены библиотеки для работы со скриптом, установите их с помощью pip:
   bash
   pip install psycopg2-binary
   

#### Структура проекта

Создайте следующую структуру директорий и файлов:


your_project_directory/
│
├── backup_script.py         # Ваш скрипт резервного копирования
├── settings.json            # Файл настроек
└── databases.txt            # Файл со списком баз данных


### 1. Настройка файла `settings.json`

Создайте файл `settings.json` в корневой директории вашего проекта. Это файл настроек, который должен содержать следующие параметры:

json
{
    "pg_dump_path": "/usr/bin/pg_dump",     // Путь к утилите pg_dump
    "host": "localhost",                     // Адрес базы данных
    "port": "5432",                          // Порт для подключения
    "username": "your_username",             // Ваше имя пользователя базы данных
    "backup_folder": "/path/to/backup/",     // Папка для сохранения резервных копий
    "max_backups": 5,                        // Максимальное количество резервных копий для каждой базы данных
    "telegram_notifications_enabled": true,   // Включить уведомления в Telegram (true/false)
    "telegram_script_path": "/path/to/telegram_notification.py", // Путь к скрипту для отправки уведомлений
    "ftp_enabled": false,                    // Включить загрузку на FTP (true/false)
    "ftp_host": "ftp.example.com",           // Адрес FTP сервера
    "ftp_port": 21,                          // Порт FTP
    "ftp_user": "ftp_user",                  // Имя пользователя FTP
    "ftp_password": "ftp_password",          // Пароль FTP
    "ftp_target_folder": "backups"           // Папка на FTP для загрузки
}


### 2. Настройка файла `databases.txt`

Создайте файл `databases.txt` в корневой директории вашего проекта. Этот файл должен содержать названия баз данных, которые нужно резервировать. Каждую базу данных пишите на новой строке. Пример:


database1
database2
#database3  // Эта база данных будет временно исключена из резервного копирования
database4


**Важно**: Если вы хотите временно исключить базу данных из резервного копирования, добавьте символ `#` перед ее именем, как показано в примере выше.

### 3. Запуск скрипта

Чтобы запустить скрипт резервного копирования, выполните следующую команду в терминале:

bash
python backup_script.py


Скрипт выполнит следующие действия:

1. Загрузит настройки из файла `settings.json`.
2. Прочитает список баз данных из файла `databases.txt`.
3. Создаст резервные копии для всех баз данных, кроме тех, что были исключены с помощью символа `#`.
4. Удалит старые резервные копии, если их количество превышает заданный лимит.
5. При включении уведомлений в Telegram отправит сообщения о статусе резервных копий.
6. При включении FTP загрузит резервные копии на указанный сервер.

### 4. Просмотр логов

Все сообщения о выполнении скрипта, включая информацию о создании резервных копий и удалении старых файлов, будут записаны в лог-файл. 
Убедитесь, что у вас есть доступ к этому лог-файлу для просмотра результатов выполнения.

### Заключение

Это основные шаги по настройке и использованию скрипта для резервного копирования баз данных. Если у вас возникнут вопросы или проблемы, обратитесь к администратору вашего сервера или в сообщество поддержки Python.